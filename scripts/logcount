#!/usr/bin/env python3
import argparse
import datetime
import sys
import os
import re

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("search_string")
    parser.add_argument("filename")
    return parser, parser.parse_args()

def validate_inputs(parser):
    if not os.path.exists(args.filename):
       print("%s does not exist" % args.filename)
       sys.exit(1)


def search(filename, search_string):
    results = []
    with open(filename, 'r') as f:
        for line in f:
            if search_string in line:
                results += [line]
    return results

def print_scrubbed_output(results):
    for line in results:
        scrubline = convert_time(line, r"[A-Z][a-z]{2} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}", '%b %d %H:%M:%S')
        scrubline = convert_time(scrubline, r"[0-9]{2}\/[A-Z][a-z]{2}\/[0-9]{4}:[0-9]{2}:[0-9]{2}:[0-9]{2} \+[0-9]{4}", '%d/%b/%Y:%H:%M:%S %z')
        print(scrubline)

def convert_time(input_string, regex, date_format, tz_offset=-8):
    # some of these timestamps don't specify a year... leave them off if it doesn't
    if '%Y' in date_format:
        out_format = "%d/%m/%Y %H:%M:%S"
    else:
        out_format = "%d/%m %H:%M:%S"

    date_match = re.compile(regex)
    date_string = re.findall(regex, input_string)[0]

    # get time and generate a timezone offset
    the_time = datetime.datetime.strptime(date_string, date_format)
    the_time = the_time.replace(tzinfo=datetime.timezone.utc)
    timezone = datetime.timezone(datetime.timedelta(hours=tz_offset))

    # substitute our original timestamp with a timezone adjusted one
    output_string = re.sub(regex, the_time.astimezone(timezone).strftime(out_format), input_string)

    return output_string

if __name__ == "__main__":
    parser, args = parse_args()
    validate_inputs(parser)
    results = search(args.filename, args.search_string)
    print_scrubbed_output(results)
    print("Count: %s"%len(results))
